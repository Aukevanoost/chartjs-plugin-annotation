(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{404:function(t,e,n){"use strict";n.r(e);var a=n(5),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"options"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#options"}},[t._v("#")]),t._v(" Options")]),t._v(" "),n("h2",{attrs:{id:"color"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#color"}},[t._v("#")]),t._v(" Color")]),t._v(" "),n("p",[t._v("Any color supported by "),n("a",{attrs:{href:"https://www.chartjs.org/docs/master/general/colors",target:"_blank",rel:"noopener noreferrer"}},[t._v("chart.js"),n("OutboundLink")],1),t._v(" is supported by the annotation plugin.")]),t._v(" "),n("h2",{attrs:{id:"font"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#font"}},[t._v("#")]),t._v(" Font")]),t._v(" "),n("p",[t._v("Fonts use the same format as "),n("a",{attrs:{href:"https://www.chartjs.org/docs/master/general/fonts",target:"_blank",rel:"noopener noreferrer"}},[t._v("chart.js"),n("OutboundLink")],1),t._v(".")]),t._v(" "),n("h2",{attrs:{id:"scriptable-options"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#scriptable-options"}},[t._v("#")]),t._v(" Scriptable Options")]),t._v(" "),n("p",[t._v("As with most options in chart.js, the annotation plugin options are scriptable. This means that a function can be passed which returns the value as needed. In the example below, the annotation is hidden when the screen is less than 1000px wide")]),t._v(" "),n("chart-editor",{attrs:{code:"/* <block:options:0> */\nconst options = {\n  plugins: {\n    autocolors: false,\n    annotation: {\n      annotations: {\n        box1: {\n          drawTime: 'afterDatasetsDraw',\n          display: (context) => {\n            const body = document.querySelector('body');\n            const rect = body.getBoundingClientRect();\n            return rect.width >= 1000;\n          },\n          type: 'box',\n          xMin: 1,\n          xMax: 2,\n          yMin: 50,\n          yMax: 70,\n          backgroundColor: 'rgba(255, 99, 132, 0.5)'\n        }\n      }\n    }\n  }\n};\n/* </block:options> */\n\n/* <block:config:1> */\nconst config = {\n  type: 'line',\n  data: {\n    labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n    datasets: [{\n      label: 'My First Dataset',\n      data: [65, 59, 80, 81, 56, 55, 40],\n      fill: false,\n      borderColor: 'rgb(75, 192, 192)',\n      tension: 0.1\n    }]\n  },\n  options\n};\n/* </block:config> */\n\nmodule.exports = {\n  config\n}\n"}}),n("h2",{attrs:{id:"draw-time"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#draw-time"}},[t._v("#")]),t._v(" Draw Time")]),t._v(" "),n("p",[t._v("The "),n("code",[t._v("drawTime")]),t._v(" option for an annotation determines where in the chart lifecycle the drawing occurs. Four potential options are available:")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("Option")]),t._v(" "),n("th",[t._v("Notes")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[n("code",[t._v("'beforeDraw'")])]),t._v(" "),n("td",[t._v("Occurs before any drawing takes place")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("'beforeDatasetsDraw'")])]),t._v(" "),n("td",[t._v("Occurs after drawing of axes, but before datasets")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("'afterDatasetsDraw'")])]),t._v(" "),n("td",[t._v("Occurs after drawing of datasets but before items such as the tooltip")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("'afterDraw'")])]),t._v(" "),n("td",[t._v("After other drawing is completed.")])])])])],1)}),[],!1,null,null,null);e.default=r.exports}}]);